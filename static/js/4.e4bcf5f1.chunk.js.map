{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","dialogs","dialogsItems","dialog","messages","message","DialogItem","props","react_default","a","createElement","className","s","active","react_router_dom","to","id","name","Message","_ref","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","state","dialogsPage","dialogsElements","map","d","Dialogs_DialogItem_DialogItem","key","messagesElements","m","Dialogs_Message_Message","Dialogs_AddMessageForm_AddMessageForm","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps","Object","objectWithoutProperties","react_router"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,QAAA,yBAAAC,aAAA,8BAAAC,OAAA,wBAAAC,SAAA,0BAAAC,QAAA,0HCgBHC,EARyB,SAACC,GACrC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAET,OAAS,IAAMS,IAAEC,QAC/BL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAASC,GAAI,YAAcR,EAAMS,IAAKT,EAAMU,QCCzCC,EANsB,SAAAC,GAAiB,IAAdd,EAAcc,EAAdd,QACpC,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEP,SAAUA,6BCF9Be,EAAcC,YAAiB,IAmBtBC,cAAoC,CAACC,KAAM,2BAA3CD,CAbT,SAACf,GACH,OACIC,EAAAC,EAAAC,cAAA,QAAMc,SAAUjB,EAAMkB,cAClBjB,EAAAC,EAAAC,cAAA,WACKgB,YAA0C,qBAAsB,iBAAkB,CAACC,IAAUP,GAAcQ,MAEhHpB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0BCoBDmB,EAvBsB,SAACtB,GAClC,IAAIuB,EAAQvB,EAAMwB,YAEdC,EAAkBF,EAAM7B,QAAQgC,IAAK,SAAAC,GAAC,OAAI1B,EAAAC,EAAAC,cAACyB,EAAD,CAAYlB,KAAMiB,EAAEjB,KAAMmB,IAAKF,EAAElB,GAAIA,GAAIkB,EAAElB,OACrFqB,EAAmBP,EAAM1B,SAAS6B,IAAK,SAAAK,GAAC,OAAI9B,EAAAC,EAAAC,cAAC6B,EAAD,CAASlC,QAASiC,EAAEjC,QAAS+B,IAAKE,EAAEtB,OAMpF,OACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEX,SACdO,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEV,cACZ8B,GAENxB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAER,UACdI,EAAAC,EAAAC,cAAA,WAAO2B,IAEX7B,EAAAC,EAAAC,cAAC8B,EAAD,CAAgBhB,SAZJ,SAACiB,GACjBlC,EAAMmC,YAAYD,EAAOE,8CCnB7BC,EAA6B,SAACd,GAAD,MAA0B,CACvDe,OAAQf,EAAMgB,KAAKD,qBCORE,sBACXC,YAPkB,SAAClB,GACnB,MAAO,CACHC,YAAaD,EAAMC,cAKE,CACrBW,YAAaO,IAAQP,cDAtB,SAA+BQ,GAclC,OAJqCF,YACjCJ,EAA4B,GADKI,CARiC,SAACzC,GAAU,IACxEsC,EAAwBtC,EAAxBsC,OAAWM,EAD6DC,OAAAC,EAAA,EAAAD,CAChD7C,EADgD,YAG7E,OAAKsC,EAEErC,EAAAC,EAAAC,cAACwC,EAAqBC,GAFT3C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAUvC,GAAG,cCP1BgC,CAKblB","file":"static/js/4.e4bcf5f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3xnZg\",\"dialogsItems\":\"Dialogs_dialogsItems__1SPfK\",\"dialog\":\"Dialogs_dialog__2SN3r\",\"messages\":\"Dialogs_messages__2cP2A\",\"message\":\"Dialogs_message__1jP2f\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={\"/Dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = ({ message }) => {\r\n    return(\r\n        <div className={s.message}>{message}</div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input, Textarea} from '../../../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {NewMessageFormValuesType} from '../Dialogs';\r\nimport {LoginFormValuesType} from '../../Login/Login';\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType>\r\n    = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>(\"Enter your message\", 'newMessageBody', [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialog-add-message-form'})(AddMessageForm);","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\nimport {InitialStateType} from '../../redux/dialogs-reducer';\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />  );\r\n    let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id} /> );\r\n\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsElements }\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{ messagesElements }</div>\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from '../redux/redux-store';\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import {actions} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        sendMessage: actions.sendMessage\r\n    }),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}