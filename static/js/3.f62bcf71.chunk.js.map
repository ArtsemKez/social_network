{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/Post/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","DescriptionBlock","contacts","PostsBlock","posts","item","ProfileStatusWithHooks","props","_useState","useState","_useState2","Object","slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","react_default","a","createElement","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","_ref","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","createField","Input","type","Textarea","keys","map","key","s","contact","ProfileData","_ref2","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo_Contact","contactTitle","contactValue","Contact","_ref3","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","target","files","length","ProfileInfo_ProfileDataForm","initialValues","formData","then","ProfileInfo_ProfileData","ProfileInfo_ProfileStatusWithHooks","Post","likesCoint","message","required","MyPostsMemorized","React","memo","postsElements","toConsumableArray","reverse","p","MyPosts_Post_Post","id","likesCount","postsBlock","Post_AddPostForm","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","MyPosts","Profile","Profile_ProfileInfo_ProfileInfo","MyPosts_MyPostsContainer","ProfileContainer","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","components_Profile_Profile","assign","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.f62bcf71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"DescriptionBlock\":\"ProfileInfo_DescriptionBlock__Glmio\",\"contacts\":\"ProfileInfo_contacts__AVYRz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PostsBlock\":\"MyPosts_PostsBlock__YCzvk\",\"posts\":\"MyPosts_posts__2EbPV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__96ZNP\"};","import React, {useState, useEffect, ChangeEvent} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status: </b> <span onDoubleClick={activateEditMode}>{props.status || \"-------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../../common/FormsControls/FormsControls.module.css\";\r\nimport {ProfileType} from '../../../types/types';\r\nimport { GetStringKeys, createField, Textarea, Input } from \"../../../common/FormsControls/FormsControls\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>save</button></div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: { createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"} )}\r\n        </div>\r\n\r\n        <div>\r\n            <b>My professional skills</b>:\r\n            { createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea  )}\r\n        </div>\r\n\r\n\r\n        <div>\r\n            <b>About me</b>:\r\n            { createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea  )}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                {/* todo: create some solution for embedded objects */}\r\n            <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/preloader.svg\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from '../../../types/types';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // todo: remove then\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n\r\n                { editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {setEditMode(true)} } profile={profile} isOwner={isOwner}/> }\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {\r\n            Object\r\n                .keys(profile.contacts)\r\n                .map((key)  => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React, { Props } from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n  message: string\r\n  likesCoint: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = ({likesCoint, message}) => {\r\n  return (\r\n    <div>\r\n      <div className={s.item}>\r\n          <img src='https://avatars.mds.yandex.net/get-pdb/1679414/4552ff24-f27b-4f50-b0ad-8b1a7843aaba/s1200'/>\r\n        { message }\r\n        <div>\r\n          <span>Like</span> {likesCoint}\r\n        </div>\r\n      </div>\r\n    </div>)\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport { createField, GetStringKeys, Input } from '../../../../common/FormsControls/FormsControls';\r\nimport { required } from '../../../../utils/validators/validators';\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    { createField<AddPostFormValuesTypeKeys>(\"Your post\", 'newPostText', [required], Input) }\r\n                </div>\r\n                <div>\r\n                    <button>Add post</button>\r\n                </div>\r\n            </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profile-add-post'})(AddPostForm)","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {PostType} from '../../../types/types';\r\nimport AddPostForm, { AddPostFormValuesType } from './Post/AddPostForm';\r\n\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post key={p.id} message={p.message} likesCoint={p.likesCount}/>);\r\n\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts);\r\n\r\nexport default MyPostsMemorized;","import React from 'react';\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from '../../../redux/redux-store';\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPostActionCreator\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from '../../types/types';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile:React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {ProfileType} from '../../types/types';\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n    }\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                // todo: may be replace push with Redirect??\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    //console.log('mapStateToProps PROFILE')\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);"],"sourceRoot":""}